// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ./src/test/proto/test.proto
package com.levelmoney.kbuilders.test.proto;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.ENUM;
import static com.squareup.wire.Message.Datatype.INT64;
import static com.squareup.wire.Message.Datatype.STRING;

public final class Address extends Message {
  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_STREET = "";
  public static final Long DEFAULT_NUMBER = 0L;
  public static final AddressType DEFAULT_TYPE = AddressType.RESIDENTIAL;

  @ProtoField(tag = 1, type = STRING)
  public final String street;

  @ProtoField(tag = 2, type = INT64)
  public final Long number;

  @ProtoField(tag = 3, type = ENUM)
  public final AddressType type;

  public Address(String street, Long number, AddressType type) {
    this.street = street;
    this.number = number;
    this.type = type;
  }

  private Address(Builder builder) {
    this(builder.street, builder.number, builder.type);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Address)) return false;
    Address o = (Address) other;
    return equals(street, o.street)
        && equals(number, o.number)
        && equals(type, o.type);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = street != null ? street.hashCode() : 0;
      result = result * 37 + (number != null ? number.hashCode() : 0);
      result = result * 37 + (type != null ? type.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<Address> {

    public String street;
    public Long number;
    public AddressType type;

    public Builder() {
    }

    public Builder(Address message) {
      super(message);
      if (message == null) return;
      this.street = message.street;
      this.number = message.number;
      this.type = message.type;
    }

    public Builder street(String street) {
      this.street = street;
      return this;
    }

    public Builder number(Long number) {
      this.number = number;
      return this;
    }

    public Builder type(AddressType type) {
      this.type = type;
      return this;
    }

    @Override
    public Address build() {
      return new Address(this);
    }
  }
}
